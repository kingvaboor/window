#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define BUFFER_SIZE 2

// Structure to represent the shared buffer
typedef struct {
    int buffer[BUFFER_SIZE];
    int size;
    int in;
    int out;
    pthread_mutex_t mutex;
    pthread_cond_t not_full;
    pthread_cond_t not_empty;
} SharedBuffer;

SharedBuffer buffer;

void initBuffer() {
    buffer.size = 0;
    buffer.in = 0;
    buffer.out = 0;
    pthread_mutex_init(&buffer.mutex, NULL);
    pthread_cond_init(&buffer.not_full, NULL);
    pthread_cond_init(&buffer.not_empty, NULL);
}

void produce(int value) {
    pthread_mutex_lock(&buffer.mutex);

    while (buffer.size == BUFFER_SIZE) {
        pthread_cond_wait(&buffer.not_full, &buffer.mutex);
    }

    buffer.buffer[buffer.in] = value;
    buffer.in = (buffer.in + 1) % BUFFER_SIZE;
    buffer.size++;

    printf("Producer produced-%d\n", value);

    pthread_cond_signal(&buffer.not_empty);
    pthread_mutex_unlock(&buffer.mutex);
}

int consume() {
    pthread_mutex_lock(&buffer.mutex);

    while (buffer.size == 0) {
        pthread_cond_wait(&buffer.not_empty, &buffer.mutex);
    }

    int val = buffer.buffer[buffer.out];
    buffer.out = (buffer.out + 1) % BUFFER_SIZE;
    buffer.size--;

    printf("Consumer consumed-%d\n", val);

    pthread_cond_signal(&buffer.not_full);
    pthread_mutex_unlock(&buffer.mutex);

    return val;
}

void *producer(void *arg) {
    int value = 0;
    while (1) {
        produce(value++);
        sleep(1); // Simulate producer work
    }
    return NULL;
}

void *consumer(void *arg) {
    while (1) {
        int val = consume();
        sleep(1); // Simulate consumer work
    }
    return NULL;
}

int main() {
    initBuffer();

    pthread_t producer_thread, consumer_thread;

    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    pthread_mutex_destroy(&buffer.mutex);
    pthread_cond_destroy(&buffer.not_full);
    pthread_cond_destroy(&buffer.not_empty);

    return 0;
}
