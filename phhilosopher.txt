#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define PHILOSOPHERS 5

pthread_mutex_t chopsticks[PHILOSOPHERS];
sem_t mutex;

void *philosopher(void *arg) {
    int philosopher_number = *(int *)arg;
    int left_chopstick = philosopher_number;
    int right_chopstick = (philosopher_number + 1) % PHILOSOPHERS;

    while (1) {
        printf("Philosopher %d is thinking.\n", philosopher_number + 1);
        sleep(rand() % 3);

        sem_wait(&mutex);

        pthread_mutex_lock(&chopsticks[left_chopstick]);
        pthread_mutex_lock(&chopsticks[right_chopstick]);

        printf("Philosopher %d is eating.\n", philosopher_number + 1);
        sleep(rand() % 3);

        pthread_mutex_unlock(&chopsticks[left_chopstick]);
        pthread_mutex_unlock(&chopsticks[right_chopstick]);

        sem_post(&mutex);
    }

    pthread_exit(NULL);
}

int main() {
    pthread_t philosophers[PHILOSOPHERS];
    int philosopher_numbers[PHILOSOPHERS];

    sem_init(&mutex, 0, 1);

    for (int i = 0; i < PHILOSOPHERS; i++) {
        pthread_mutex_init(&chopsticks[i], NULL);
    }

    for (int i = 0; i < PHILOSOPHERS; i++) {
        philosopher_numbers[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &philosopher_numbers[i]);
    }

    for (int i = 0; i < PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    sem_destroy(&mutex);

    for (int i = 0; i < PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&chopsticks[i]);
    }

    return 0;
}
