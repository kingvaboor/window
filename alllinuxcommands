Linux Commands

______LINUX COMMANDS______

	passwd - Create or update passwords for existing users
	
	date - for date :: date -r <file_name> :: last modification time of file
					:: date -d "+7 days"
					:: date -d "2023-11-2" "+%A" :: accessing a particular thing in date "+%B"
	
	wc :: -l (or --lines): Counts the number of lines in the file.
		  -w (or --words): Counts the number of words in the file. Words are typically defined as sequences of characters separated by whitespace.
		  -c (or --bytes): Counts the number of bytes in the file.
		  -m (or --chars): Counts the number of characters in the file. This can be different from bytes in multi-byte character encodings like UTF-8.
		  -L (or --max-line-length): Prints the length of the longest line in the file.
	
	nl :: nl <file_name> prints number of lines actually written
	
	tail :: tail -n <num> <file_name> :: prints the last n lines of file
	
	who :: lists users in the system
		:: who --count :: number of users in the system
		:: who -H
	
	cat > myfile.txt ::  creates myfile and opens
	cat file :: view file
	touch myfile.txt :: creates file
	
	man date > mydate: This command redirects the output of the man date command to a file named "mydate."
					   If the "mydate" file already exists, using > will overwrite its contents with the output from the man date command. If "mydate" does not exist, it will be created.
	man date >> mydate: This command appends the output of the man date command to a file named "mydate."
						If the "mydate" file already exists, using >> will add the output from the man date command to the end of the file without affecting its existing contents. If "mydate" does not exist, it will be created.
	
	../ -> prev dir
	./ -> curr dir
	
	mv <file_name>  path/<new_file_name>
	mv source_directory/* destination_directory/
	mv * dir/
	
	cp source_dir/<file_name> dest/<[new/exist]_file_name>
	
	ls :Performs a long listing, showing detailed information about each file and directory, including permissions, owner, group, file size, modification time, and more.
	   -a: Lists all files, including hidden files (those that start with a dot .).
	   -h: Human-readable format for file sizes, displaying sizes in a more user-friendly format (e.g., "1.5K" instead of bytes).
	   -t: Sorts files by modification time, with the most recently modified files appearing first.
	   -r: Reverses the order of the file list.
	   -R: Recursively lists the contents of subdirectories.
	
	pwd
	head -n <num> <file_name>  ........first n lines of file
	tail -n <num> <file_name> .........last n ------|-------
	
	cat f1 f2 f3 >> f0 .......appendning contents of files to f0
	
	
	grep "pattern" filename :: lists lines with that pattern
	
	# Perform a case-insensitive search for the word "example" in the file "sample.txt"
	grep -i "example" sample.txt

	# Count the number of occurrences of "error" in a log file
	grep -c "error" logfile.log

	# List files containing the word "keyword" in a directory and its subdirectories
	grep -rl "keyword" /path/to/directory

	# Display matching lines with line numbers
	grep -n "pattern" file.txt

	# Print only the matching part of each line
	grep -o "pattern" data.txt

	# Search for multiple patterns in a file
	grep -e "pattern1" -e "pattern2" file.txt

	# Perform a recursive search for the word "searchme" in all text files within a directory
	grep -r "searchme" /path/to/directory/*.txt
	
	# Basic pattern matching
	grep "error" access.log

	# Lines starting with a specific word
	grep "^start" data.txt

	# Lines ending with a particular word
	grep "end$" data.txt

	# Excluding lines with a specific word
	grep -v "exclude" file.txt

	# Matching variations in spelling
	grep "colou?r" text.txt

	# Matching email addresses
	grep -E -o "[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}" emails.txt

	# Lines containing a specific character
	grep "@" contacts.txt

	# Multiple patterns using OR logic
	grep -e "pattern1" -e "pattern2" data.txt

	# Multiple patterns using AND logic
	grep "pattern1" file.txt | grep "pattern2"

	# Date range in log file
	grep -E "2023-11-01|2023-11-30" access.log

	# Extracting lines between two patterns and searching for a specific pattern
	sed -n '/start_pattern/,/end_pattern/p' data.txt | grep "desired_pattern"
	
	grep -o -E '\b\w{4}\b' mydate    --- size of word wale
	sed -i 's/\boldword\b/newword/g' filename

	paste -d "-" capitals1 capitals2 | cat > file 
	cut -d ":" -f1,3 f_name :: cut the files whose words are separated by ':' and print cols 1,3  
		
	# Capture the output of a command and save it to a file
	ls | tee file.txt

	# Append output to an existing file
	echo "New data" | tee -a existing_file.txt

	# Save the output to multiple files
	cat data.txt | tee file1.txt file2.txt

	# Use tee with other commands in a pipeline
	ls -l | grep "pattern" | tee results.txt

	# Redirect error messages and standard output to different files using tee
	some_command 2> errors.txt | tee output.txt

	ls -l | awk '{print $5}'
	
	# Convert text to uppercase
	echo "hello, world" | tr '[:lower:]' '[:upper:]'

	# Delete specific characters (spaces)
	echo "remove all spaces" | tr -d ' '

	# Squeeze consecutive spaces into one
	echo "squeeze    these   spaces" | tr -s ' '	

	# Replace characters (spaces with underscores)
	echo "replace spaces" | tr ' ' '_'

	# Translate digits to Roman numerals
	echo "12345" | tr '0-9' 'IVXLCDM'

	# ROT13 encryption/decryption
	echo "Hello, World" | tr 'A-Za-z' 'N-ZA-Mn-za-m'

	# Strip non-alphanumeric characters
	echo "clean up text!123" | tr -cd '[:alnum:]'

	# Convert CSV to TSV (replace commas with tabs)
	echo "a,b,c" | tr ',' '\t'

	tr '[:lower:]' '[:upper:]' < mystates > mystates_uppercase
	tr 'oldword' 'newword' < mystates > mystates_uppercase
	------------------------------------------------------------------------------------------
	# Compare and display unique lines in two files
	comm -3 <(sort file1.txt) <(sort file2.txt)

	# Find common lines between two files
	comm -12 <(sort file1.txt) <(sort file2.txt)

	# Display unique lines and common lines with prefixes
	comm -3 -1 -2 <(sort file1.txt) <(sort file2.txt) | sed -e 's/^/1 /' -e 's/\t/ /'

	# Check if two files are identical
	comm <(sort file1.txt) <(sort file2.txt)

	# Compare files with different sort orders
	comm -12 <(sort file1.txt) file2.txt

	# Analyze differences in log files
	comm -3 <(sort log1.txt) <(sort log2.txt)

	# Data validation and deduplication
	comm -2 -3 <(sort data.txt) <(sort data2.txt)

	# Scripting and automation
	comm -12 <(sort script1.sh) <(sort script2.sh)

	# Database record comparison
	comm -3 <(sort records1.csv) <(sort records2.csv)

	# Generating reports on data discrepancies
	comm -3 <(sort data1.txt) <(sort data2.txt)

	# Version control systems (example with Git)
	git diff --no-index -- file1.txtÂ file2.txt
